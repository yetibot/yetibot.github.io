<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='https://yetibot.com/' rel='self' type='application/rss+xml'/>
<title>
Yetibot
</title>
<link>
https://yetibot.com/
</link>
<description>
Docs and blog posts for Yetibot
</description>
<lastBuildDate>
Wed, 13 May 2020 22:26:44 +0000
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
https://yetibot.com/blog/2020-04-27-guide-jira-basics
</guid>
<link>
https://yetibot.com/blog/2020-04-27-guide-jira-basics
</link>
<title>
Guide: Jira Basics
</title>
<description>
&lt;p&gt;In this &lt;a href='/tags/guide'&gt;guide&lt;/a&gt; we cover basic ways of working with the &lt;code&gt;jira&lt;/code&gt; command, including:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;creating issues&lt;/li&gt;&lt;li&gt;updating issues&lt;/li&gt;&lt;li&gt;assigning issues&lt;/li&gt;&lt;li&gt;commenting on issues&lt;/li&gt;&lt;li&gt;logging work on issues&lt;/li&gt;&lt;li&gt;aliases&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Also check out &lt;a href='http://localhost:4040/user-guide#jira'&gt;Yetibot's Jira reference&lt;/a&gt; for docs on its full capabilities.&lt;/p&gt;&lt;h2 id=&quot;channel&amp;#95;project&quot;&gt;Channel project&lt;/h2&gt;&lt;p&gt;The first thing you'll want to do is set the Jira project(s) for your channel. This tells Yetibot the default project to use when running &lt;code&gt;jira&lt;/code&gt; commands in your channel, and allows it to auto-expand issues when you mention an issue key in conversation, without needing to trigger Yetibot manually.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/screenshots/yetibot_jira_obs.png&quot; alt=&quot;karma basic interface&quot; /&gt;&lt;/p&gt;&lt;p&gt;Check current settings:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!channel settings
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And if &lt;code&gt;jira-project&lt;/code&gt; is not set, set it with:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!channel set jira-project YETIBOT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once &lt;code&gt;jira-project&lt;/code&gt; is set we can run commands like &lt;code&gt;jira recent&lt;/code&gt; to see all recent tasks for the configured project:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira recent
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Make sure to set &lt;code&gt;jira-project&lt;/code&gt; for every channel you're in. It can vary from channel to channel, and also supports multiple comma-separated projects. When multiple projects are specified, commands like &lt;code&gt;jira recent&lt;/code&gt; or &lt;code&gt;jira create&lt;/code&gt; will default to the first project, and the issue &lt;a href='/user-guide#observers'&gt;observer&lt;/a&gt; that listens for words  that look like a Jira issue key (as demonstrated in the screenshot above) will fire on all configured projects.&lt;/p&gt;&lt;h2 id=&quot;create&quot;&gt;Create&lt;/h2&gt;&lt;p&gt;Let's check the &lt;code&gt;jira create&lt;/code&gt; docs:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!help jira | grep jira create
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are quite a few options, and which ones are required depend on your particular Jira project configuration, but &lt;code&gt;summary&lt;/code&gt; is always required, and &lt;code&gt;description&lt;/code&gt; often is. Try it out:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira create hello at `time +0` UTC!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;recent&amp;#95;issues&quot;&gt;Recent issues&lt;/h2&gt;&lt;p&gt;We already saw how &lt;code&gt;jira recent&lt;/code&gt; lists recent issues for the configured projects in a channel.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira recent
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Internally, this uses Jira's powerful &lt;a href='https://confluence.atlassian.com/jirasoftwareserver/advanced-searching-939938733.html#Advancedsearching-ConstructingJQLqueries'&gt;JQL support&lt;/a&gt; to query for issues. With &lt;code&gt;YETIBOT&lt;/code&gt; as the configured &lt;code&gt;jira-project&lt;/code&gt;, the exact query would be:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;project in &amp;#40;YETIBOT&amp;#41;&amp;#41; ORDER BY updatedDate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This doesn't limit the issues to a certain age, but just returns the most recent page (default page size is 10) of issues.&lt;/p&gt;&lt;h2 id=&quot;show&quot;&gt;Show&lt;/h2&gt;&lt;p&gt;If we know an issue key, we can ask Yetibot to show all of its details:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira show YETIBOT-1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But what if we just want to show the latest issue without knowing its key? We can use a combination of commands with pipes, like:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira recent | head | jira parse | jira show
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This works by evaluating commands from left to right, passing the value from one command to the next across the &lt;code&gt;|&lt;/code&gt; &quot;pipe&quot; as input:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;jira recent&lt;/code&gt; gets the list of recent issues&lt;/li&gt;&lt;li&gt;&lt;code&gt;head&lt;/code&gt; takes the first issue&lt;/li&gt;&lt;li&gt;&lt;code&gt;jira parse&lt;/code&gt; parses out just the issue key, e.g. &lt;code&gt;YETIBOT-123&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;jira show&lt;/code&gt; shows the issue given the key&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We'll continue to use this pattern to work on the latest issue throughout the rest of this guide, so let's &lt;a href='https://yetibot.com/user-guide#aliases'&gt;alias&lt;/a&gt; it:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!alias firstjira = &amp;quot;jira recent | head | jira parse&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!firstjira
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;update&quot;&gt;Update&lt;/h2&gt;&lt;p&gt;Yetibot can update issues:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!help jira | grep jira update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let's update the description of the most recent issue then pipe it to `jira show`, which will show us the full description (unlike the short format).&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!firstjira | jira update %s -d This description was updated at `time +0` UTC | jira parse | jira show
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;article class=&quot;message is-info&quot;&gt; &lt;div class=&quot;message-header&quot;&gt;   &lt;p&gt;💡&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;message-body&quot;&gt;   Notice how we used the &lt;code&gt;%s&lt;/code&gt; symbol above. This instructs Yetibot to substitute   &lt;code&gt;%s&lt;/code&gt; with the output from the previous command rather than the default   behavior of appending to the end. &lt;a href='/user-guide#pipes'&gt;Read more about Pipes&lt;/a&gt;. &lt;/div&gt; &lt;/article&gt;&lt;/p&gt;&lt;p&gt;You can run this multiple times, and notice the updated timestamp each time it's run.&lt;/p&gt;&lt;h2 id=&quot;user&amp;#95;search&quot;&gt;User search&lt;/h2&gt;&lt;p&gt;Search the users in Jira with:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira users yeti
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;assigning&amp;#95;issues&quot;&gt;Assigning issues&lt;/h2&gt;&lt;p&gt;Issues can be re-assigned using &lt;code&gt;jira update&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira update `firstjira` -a yeti
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The assignee can be a partial match. Yetibot uses the search API to resolve the user.&lt;/p&gt;&lt;h2 id=&quot;priority&quot;&gt;Priority&lt;/h2&gt;&lt;p&gt;List all the priorities in Jira:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira priorities
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When setting a priority in &lt;code&gt;jira create&lt;/code&gt; or &lt;code&gt;jira update&lt;/code&gt; use the name, or at least part of the name, and Yetibot will do its best to match to a known priority:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira update `firstjira` -y med
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;article class=&quot;message is-info&quot;&gt; &lt;div class=&quot;message-header&quot;&gt;   &lt;p&gt;💡&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;message-body&quot;&gt;   Notice the use of subexpressions using backticks above. This lets us embed the   result of an inner command (&lt;code&gt;firstjira&lt;/code&gt;) into an outer command (&lt;code&gt;jira update&lt;/code&gt;).   &lt;a href='/user-guide#subexpressions'&gt;Read more about Subexpressions&lt;/a&gt;. &lt;/div&gt; &lt;/article&gt;&lt;/p&gt;&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;&lt;p&gt;List components in Jira with:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira components
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And just like priorities, we can set the component of an issue:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira update `firstjira` -c core | jira parse | jira show
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or get crazy and set the component randomly:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira update `firstjira` -c `jira components | render {{name}} | random` | jira parse | jira show
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Try running the above multiple times and watch the component change.&lt;/p&gt;&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;&lt;p&gt;You can comment on an issue with Yetibot, but the author will always be Yetibot itself, as it doesn't have permission to comment on other users' behalf:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!help jira | grep jira comment
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira comment `firstjira` why isn't this done yet 🤔
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;logging&amp;#95;work&quot;&gt;Logging work&lt;/h2&gt;&lt;p&gt;Yetibot can log work, but just like comments, it's logged on behalf of the Yetibot account.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!help jira | grep jira worklog
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;time-spent&lt;/code&gt; can be expressed like &lt;code&gt;2h&lt;/code&gt;, &lt;code&gt;3d&lt;/code&gt;, or &lt;code&gt;1w&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Let's log a whole 2 weeks on the latest item:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira worklog `firstjira` 2w deleted a lot of code 💾
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;transitions&quot;&gt;Transitions&lt;/h2&gt;&lt;p&gt;Transitions are Jira's workflow mechanism:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; A Jira workflow is a set of statuses and transitions that an issue moves  through during its lifecycle, and typically represents a process within your  organization. &lt;/p&gt;&lt;p&gt; &lt;a href='https://confluence.atlassian.com/adminjiracloud/working-with-workflows-776636540.html'&gt;Working with workflows&lt;/a&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Yetibot can list available transitions for an issue and move an issue through transitions.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira transitions `firstjira`
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira transition `firstjira` in progress
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or apply a random transition:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira transition `firstjira` `firstjira | jira transitions | random`
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;aliases&quot;&gt;Aliases&lt;/h2&gt;&lt;p&gt;We can use &lt;a href='https://yetibot.com/user-guide#aliases'&gt;aliases&lt;/a&gt; to further simplify Jira issue creation. For example, if we wanted a quick way to create new tasks assigned to Yetibot, we could alias it with:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!alias yetitask = &amp;quot;jira create $s -a yetibot&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then quickly create new issues for &lt;code&gt;yetibot&lt;/code&gt; with:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!yetitask do stuff, yeti ⚡️
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A common use case is to hardcode the assignee like above as a fast way to create issues for yourself. Want to quickly create a list of stuff? Try:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!list fix the foo, deploy the bar, decomplect the baz | xargs yetitask
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;/h2&gt;&lt;p&gt;I hope this guide has helped you increase your automation and Yetibot expression fluency. While this guide illustrated working with a single command, Yetibot is well-suited to be the glue between many systems in the communal context of the mighty &lt;strong&gt;channel&lt;/strong&gt;. See &lt;a href='/2020-04-20-guide-google-sheets-to-jira'&gt;Guide: Google Sheets to Jira issues&lt;/a&gt; for one such reification of this idea along with more advanced &lt;code&gt;jira&lt;/code&gt; usage.&lt;/p&gt;&lt;p&gt;If you feel like cleaning up after yourself, use this to delete all the issues you just created:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira jql created &amp;gt; -1h | xargs jira parse | xargs jira delete
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🔥&lt;/p&gt;&lt;p&gt;Question? Ideas for other guides? Post a comment below 🙏.&lt;/p&gt;
</description>
<author>
@devth
</author>
<pubDate>
Mon, 27 Apr 2020 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
https://yetibot.com/blog/2020-04-20-guide-google-sheets-to-jira
</guid>
<link>
https://yetibot.com/blog/2020-04-20-guide-google-sheets-to-jira
</link>
<title>
Guide: Google Sheets to Jira issues
</title>
<description>
&lt;p&gt; This guide demonstrates the use of Yetibot to consume a Google Sheet as a CSV  and create Jira issues from the rows.&lt;/p&gt;&lt;h2 id=&quot;csv&amp;#95;consumption&quot;&gt;CSV consumption&lt;/h2&gt;&lt;p&gt; We'll use this  &lt;a href='https://docs.google.com/spreadsheets/d/1JIp3AjmPIA7T2aJsXPDaz7KxyxJLJGbgkR6r_dpvu_E/edit?usp=sharing'&gt;Yetibot tasks Google Sheet&lt;/a&gt;.  To get the sheet in CSV format, just change the end of the URL from  &lt;code&gt;edit?usp=sharing&lt;/code&gt; to &lt;code&gt;export?format=csv&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!curl https://docs.google.com/spreadsheets/d/1JIp3AjmPIA7T2aJsXPDaz7KxyxJLJGbgkR6r&amp;#95;dpvu&amp;#95;E/export?format=csv
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can consume that URL with the &lt;code&gt;csv&lt;/code&gt; command.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!help csv
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!csv https://docs.google.com/spreadsheets/d/1JIp3AjmPIA7T2aJsXPDaz7KxyxJLJGbgkR6r&amp;#95;dpvu&amp;#95;E/export?format=csv
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let's alias that so it's a little more readable:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!alias yetitasks = &amp;quot;csv https://docs.google.com/spreadsheets/d/1JIp3AjmPIA7T2aJsXPDaz7KxyxJLJGbgkR6r&amp;#95;dpvu&amp;#95;E/export?format=csv&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then make sure it works as expected:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!yetitasks
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;towards&amp;#95;jira&quot;&gt;Towards Jira&lt;/h2&gt;&lt;p&gt;Next, we need to figure out how to pipe that to &lt;code&gt;jira&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We can take advantage of the &lt;code&gt;render&lt;/code&gt; command, which lets us render templates against a data structure, like the above.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!help render
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For example, if we only want to look at the &lt;code&gt;Summary&lt;/code&gt; column:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!yetitasks | render {{Summary}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let's look at &lt;code&gt;jira create&lt;/code&gt; docs to see how we can construct it dynamically:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!help jira | grep create
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So at a minimum, it'd look like:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!yetitasks | render jira create {{Summary}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But we can also take advantage of the other columns:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!yetitasks | render jira create {{Summary}} -d {{Description}} -t {{Estimate}} -c {{Component}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, to actually run those commands, we can use the &lt;code&gt;cmd&lt;/code&gt; command:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!help cmd
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;tldr&quot;&gt;tldr&lt;/h2&gt;&lt;p&gt;Put it all together:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!yetitasks | render jira create {{Summary}} -d {{Description}} -t {{Estimate}} -c {{Component}} | xargs cmd
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;🔥&quot;&gt;🔥&lt;/h2&gt;&lt;p&gt;To clean up we can use &lt;code&gt;jira jql&lt;/code&gt; to query issues created in the last hour:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira jql created &amp;gt; -1h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And delete them:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!jira jql created &amp;gt; -1h | xargs jira parse | xargs jira delete
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🔥&lt;/p&gt;&lt;h2 id=&quot;power&quot;&gt;Power&lt;/h2&gt;&lt;p&gt;Hopefully this guide has illustrated the power of &lt;code&gt;|&lt;/code&gt; pipes, &lt;code&gt;xargs&lt;/code&gt;, &lt;code&gt;render&lt;/code&gt; and &lt;code&gt;cmd&lt;/code&gt;. They are foundational pieces of Yetibot's expressive pipeline capabilities.&lt;/p&gt;&lt;p&gt;Have ideas for other guides? Post a comment below!&lt;/p&gt;
</description>
<author>
@devth
</author>
<pubDate>
Mon, 20 Apr 2020 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
https://yetibot.com/blog/2020-04-06-digitalocean-sponsorship
</guid>
<link>
https://yetibot.com/blog/2020-04-06-digitalocean-sponsorship
</link>
<title>
DigitalOcean Sponsorship
</title>
<description>
&lt;p&gt;We are happy to announce that Yetibot is sponsored by DigitalOcean as part of their awesome &lt;a href='https://www.digitalocean.com/open-source/'&gt;Open Source Sponsorship&lt;/a&gt; program!&lt;/p&gt;&lt;p&gt;These credits allow to run the &lt;a href='https://public.yetibot.com'&gt;public Yetibot instance&lt;/a&gt; and a corresponding Postgres database on DO's cloud. This instance:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;provides the &lt;a href='https://yetibot.com/dev-guide#graphql_api'&gt;GraphQL API&lt;/a&gt; that  powers the docs at &lt;a href='https://yetibot.com'&gt;yetibot.com&lt;/a&gt;, and&lt;/li&gt;&lt;li&gt;connects to &lt;a href='https://slack.yetibot.com'&gt;Yetibot Slack&lt;/a&gt; and  &lt;a href='https://yetibot-mattermost.herokuapp.com/'&gt;Yetibot Mattermost&lt;/a&gt; so users can  play and test the bot&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Thank you, DigitalOcean!&lt;/strong&gt; Your generous open source program removes hurdles for Yetibot and countless other open source projects. ⚡️&lt;/p&gt;&lt;p&gt;&lt;div id=&quot;digitalocean-sponsorship&quot;&gt; &lt;img src=&quot;/img/yetibot_lambda_blue.svg&quot; alt=&quot;Yetibot on DigitalOcean&quot; /&gt; &lt;img src=&quot;https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/PoweredByDO/DO_Powered_by_Badge_black.svg&quot; alt=&quot;DigitalOcean is awesome&quot; /&gt; &lt;/div&gt;&lt;/p&gt;
</description>
<author>
@devth
</author>
<pubDate>
Mon, 06 Apr 2020 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
https://yetibot.com/blog/2019-05-18-karma-feature-announcement
</guid>
<link>
https://yetibot.com/blog/2019-05-18-karma-feature-announcement
</link>
<title>
Karma Feature Announcement
</title>
<description>
&lt;p&gt;The Yetibot Team just recently added a new feature called Karma.  It's an implementation of the classic IRC feature of the same name, with a few updates, and support for Slack interface opportunities.&lt;/p&gt;&lt;p&gt;One of the summary notions we kick around in the project is &quot;Community Command Line&quot;.  To me, this is all about building an interface to our work that lets more people participate in decisions and review their outcomes.  It's a big goal, and it's all about community.&lt;/p&gt;&lt;p&gt;Part of any community is recognition.  It's how we show our appreciation when someone helps us, and how we identify our experts so others, with new problems to tackle, know where to start looking for help.  With Yetibot's focus on communalizing work, adding a feature to give thanks and communicate accomplishments felt like a natural fit.&lt;/p&gt;&lt;p&gt;The idea is simple: you give a point to someone, and optionally supply a note, when you want to recognize them.  It's quick and easy.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;!karma&lt;/code&gt; command is the canonical interface, and it uses the C increment operator, &lt;code&gt;++&lt;/code&gt;, as has typically been the custom in classic IRC implementations.  We like traditions so we stuck with that as the basic operation.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/screenshots/karma_basic_iface.png&quot; alt=&quot;karma basic interface&quot; /&gt;&lt;/p&gt;&lt;p&gt;But you can also use Slack's &lt;a href='https://get.slack.help/hc/en-us/articles/206870317-Emoji-reactions'&gt;Emoji Reactions&lt;/a&gt; to quickly cheer something; a quick nod of thanks.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/screenshots/karma_emoji_reaction_iface.png&quot; alt=&quot;karma emoji reaction interface&quot; /&gt;&lt;/p&gt;&lt;p&gt;You can't supply a comment in this case, and Yetibots score update for the recipient is communicated in a thread to keep your channel uncluttered.&lt;/p&gt;&lt;p&gt;A third interface, somewhere in between the two, is to use the trigger emojis as a verb.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/screenshots/karma_emoji_verb_iface.png&quot; alt=&quot;karma emoji verb interface&quot; /&gt;&lt;/p&gt;&lt;p&gt;You can see a compact leader board&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/screenshots/karma_leaderboard.png&quot; alt=&quot;karma leaderboard&quot; /&gt;&lt;/p&gt;&lt;p&gt;Or a particular user's score and recent comments, too.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/screenshots/karma_user_score.png&quot; alt=&quot;karma user score&quot; /&gt;&lt;/p&gt;&lt;p&gt;For next steps, we'd like to start making use of the &lt;a href='https://en.wikipedia.org/wiki/Directed_graph'&gt;digraph&lt;/a&gt; created as people show their appreciation for one another.  There's a commutative &quot;web&quot; of appreciation we form as we interact.  It might be fun to see how communities enmesh as members support each other.  How many degrees of separation are there in your community?  Yetibot might be able to help answer that someday.&lt;/p&gt;&lt;p&gt;For now, we hope you enjoy the simple act of giving and getting thanks.  Have a look through the &lt;a href='https://yetibot.com/user-guide#karma'&gt;User Guide&lt;/a&gt; for more details on the interface, including our first steps on publishing reports via the GraphQL API&lt;/p&gt;
</description>
<author>
@jcorrado
</author>
<pubDate>
Sat, 18 May 2019 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
https://yetibot.com/blog/2019-05-18-yetis-at-clojure-north
</guid>
<link>
https://yetibot.com/blog/2019-05-18-yetis-at-clojure-north
</link>
<title>
Yetis at Clojure/north
</title>
<description>
&lt;p&gt;Yetibot core team members &lt;a href='https://github.com/kaffein'&gt;@kaffein&lt;/a&gt; and &lt;a href='https://github.com/devth'&gt;@devth&lt;/a&gt; had the privilege of meeting up in Toronto for the excellent &lt;a href='https://clojurenorth.com/'&gt;Clojure/north conference&lt;/a&gt; over April 19 and 20!&lt;/p&gt;&lt;p&gt;&lt;figure&gt;   &lt;img src=&quot;/img/clojure_north/core_members.jpg&quot; alt=&quot;Yetibot core members&quot; /&gt;   &lt;figcaption&gt;Yetis @ Niagra Falls&lt;/figcaption&gt; &lt;/figure&gt;&lt;/p&gt;&lt;p&gt;At the conference &lt;a href='https://github.com/devth'&gt;@devth&lt;/a&gt; gave a talk on Yetibot &quot;Growing a chatops platform and having fun with Clojure&quot;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;demonstrated core Yetibot features like expression composition, data behind  pipes, xargs and aliases&lt;/li&gt;&lt;li&gt;live coded a new GitHub search feature to demonstrate typical development of  new features&lt;/li&gt;&lt;li&gt;talked about the history of Yetibot and how it grew into an integral  team culture-building tool&lt;/li&gt;&lt;li&gt;highlighted some of the ways that Clojure enabled the development of Yetibot&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;p&gt; &lt;div class=&quot;video-responsive&quot;&gt; &lt;iframe   width=&quot;854&quot; height=&quot;480&quot;   src=&quot;https://www.youtube.com/embed/dIh4lEnCCkQ?rel=0&quot;   frameborder=&quot;0&quot;   allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot;   allowfullscreen&gt; &lt;/iframe&gt; &lt;/div&gt; &lt;/p&gt;&lt;/p&gt;&lt;p&gt;Feel free to discuss, leave feedback or ask questions on &lt;a href='https://www.reddit.com/r/Clojure/comments/bpqkkg/clojurenorth_growing_a_chatops_platform_and/'&gt;reddit&lt;/a&gt; or in the comments of this post!&lt;/p&gt;&lt;h2 id=&quot;photos&quot;&gt;Photos&lt;/h2&gt;&lt;p&gt;&lt;figure&gt;   &lt;img src=&quot;/img/clojure_north/devth_talk.jpg&quot; alt=&quot;Yetibot core members&quot; /&gt;   &lt;figcaption&gt;Intro&lt;/figcaption&gt; &lt;/figure&gt;&lt;/p&gt;&lt;p&gt;&lt;figure&gt;   &lt;img src=&quot;/img/clojure_north/clojure_north.jpg&quot; alt=&quot;Yetibot core members&quot; /&gt;   &lt;figcaption&gt;Clojure/north!&lt;/figcaption&gt; &lt;/figure&gt;&lt;/p&gt;&lt;p&gt;&lt;figure&gt;   &lt;img src=&quot;/img/clojure_north/niagra.jpg&quot; alt=&quot;Yetibot core members&quot; /&gt;   &lt;figcaption&gt;Niagra&lt;/figcaption&gt; &lt;/figure&gt;&lt;/p&gt;&lt;p&gt;&lt;figure&gt;   &lt;img src=&quot;/img/clojure_north/cn_tower.jpg&quot; alt=&quot;Yetibot core members&quot; /&gt;   &lt;figcaption&gt;CN Tower&lt;/figcaption&gt; &lt;/figure&gt;&lt;/p&gt;&lt;p&gt;&lt;figure&gt;   &lt;img src=&quot;/img/clojure_north/toronto.jpg&quot; alt=&quot;Yetibot core members&quot; /&gt;   &lt;figcaption&gt;Toronto&lt;/figcaption&gt; &lt;/figure&gt;&lt;/p&gt;&lt;p&gt;&lt;figure&gt;   &lt;img src=&quot;/img/clojure_north/flight.jpg&quot; alt=&quot;Yetibot core members&quot; /&gt;   &lt;figcaption&gt;Wisconsin along Lake Michigan&lt;/figcaption&gt; &lt;/figure&gt;&lt;/p&gt;
</description>
<author>
@devth
</author>
<pubDate>
Sat, 18 May 2019 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
https://yetibot.com/blog/2019-04-22-all-your-data-are-belong
</guid>
<link>
https://yetibot.com/blog/2019-04-22-all-your-data-are-belong
</link>
<title>
All your data are belong
</title>
<description>
&lt;p&gt;In the last few months we've been working on including raw data in command responses in addition to the formatted lossy-but-human-friendly derived value.&lt;/p&gt;&lt;p&gt;This lets us display the formatted values by default without giving up the full data in the process, and affords the user the option of tapping into these data using a few special commands that know how to access them.&lt;/p&gt;&lt;p&gt;The primary data-aware commands are:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!help data
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!help clj
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!help render
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;as well as most of the collection utilities, which simply propagate the correct data across the pipe (i.e. do what you'd expect them to).&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!category list collection
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;clj&quot;&gt;clj&lt;/h2&gt;&lt;p&gt;Having the data available means we can reference any piece of the shape instead of the default human-friendly representation. One way to do this is with the &lt;code&gt;clj&lt;/code&gt; command, thanks to an awesome idea by one of our newest contributors, &lt;a href='https://github.com/justone'&gt;@justone&lt;/a&gt;, to make the data available to &lt;code&gt;clj&lt;/code&gt; (he also contributed the &lt;code&gt;cljquote&lt;/code&gt; command which we'll use to demo this idea).&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!cljquote
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First, let's use &lt;code&gt;data&lt;/code&gt; to get at the data itself, then pass that over to &lt;code&gt;keys&lt;/code&gt; to see what's available:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!cljquote | data | keys
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, with this information we can extract just the piece we're interested in:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!cljquote | clj &amp;#40;:clojure-quotes.core/text data&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice how &lt;code&gt;clj&lt;/code&gt; can access the data from the pipe as a special var named &lt;code&gt;data&lt;/code&gt;. This puts the full power of the Clojure language at your disposal for slicing or transforming data from commands as you see fit.&lt;/p&gt;&lt;h2 id=&quot;data&quot;&gt;data&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;data&lt;/code&gt; command provides a way to pretty print all the data or get at a specific subset using &lt;a href='https://goessner.net/articles/JsonPath/'&gt;json-path&lt;/a&gt; syntax.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!help data
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let's peak at the data behind a Tweet:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!twitter display 1095377246494220288 | data show
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And get an abbreviated view looking only at its keys:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!twitter display 1095377246494220288 | data | keys
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These data represent a retweet with comment. Let's use &lt;code&gt;data&lt;/code&gt; to select the full text of the original tweet:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!twitter display 1095377246494220288 | data $.quoted&amp;#95;status.full&amp;#95;text
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We could do the same with &lt;code&gt;clj&lt;/code&gt; using pure Clojure functions:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!twitter display 1095377246494220288 | clj &amp;#40;get-in data &amp;#91;:quoted&amp;#95;status :full&amp;#95;text&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And if we wanted to render multiple properties of the retweet, we could combine &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;render&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!twitter display 1095377246494220288 | data $.quoted&amp;#95;status | render {{full&amp;#95;text}} – @{{user.screen&amp;#95;name}} {{created&amp;#95;at}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Between &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;render&lt;/code&gt;, and &lt;code&gt;clj&lt;/code&gt; we have multiple flexible ways to take advantage of the data behind a pipe.&lt;/p&gt;&lt;h2 id=&quot;propagation&amp;#95;in&amp;#95;collections&quot;&gt;Propagation in collections&lt;/h2&gt;&lt;p&gt;Collection utilities are data-aware as well, so when you transform a collection with a utility like &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;tail&lt;/code&gt;, &lt;code&gt;random&lt;/code&gt; or &lt;code&gt;grep&lt;/code&gt; (among others), the data are preserved.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!twitter show yetibot&amp;#95;chatops | random | data show
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!twitter show yetibot&amp;#95;chatops | head 3 | data show
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This works because there is symmetry between &lt;code&gt;:result/data&lt;/code&gt; and &lt;code&gt;:result/value&lt;/code&gt;, meaning each item in the &lt;code&gt;:result/value&lt;/code&gt; collection corresponds with each item in &lt;code&gt;:result/data&lt;/code&gt; or some subset of &lt;code&gt;:result/data&lt;/code&gt;. This doesn't mean that &lt;code&gt;:result/data&lt;/code&gt; must be a sequential collection. Often API responses return a top level map as the body with useful attributes like &lt;code&gt;:total-count&lt;/code&gt; or other meta data, then return the collection as an attribute of that map, e.g. &lt;code&gt;:items&lt;/code&gt;. In cases like these we don't want to give up those potentially-useful attributes, so instead commands can return an optional &lt;code&gt;:result/collection&lt;/code&gt; path key whose value is a vector containing the path to the sequence in their response, e.g.:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;{:result/value &amp;#91;&amp;quot;red&amp;quot; &amp;quot;green&amp;quot; &amp;quot;blue&amp;quot;&amp;#93;
 :result/data {:total-count 3
               :response-ms 228
               :items &amp;#91;{:display-name &amp;quot;red&amp;quot;
                        :hex &amp;quot;#ff0000&amp;quot;
                        :id 1}
                       {:display-name &amp;quot;green&amp;quot;
                        :hex &amp;quot;#00ff00&amp;quot;
                        :id 2}
                       {:display-name &amp;quot;blue&amp;quot;
                        :hex &amp;quot;#0000ff&amp;quot;
                        :id 3}&amp;#93;}
 ;; 👀 notice how this points into the `:result/data` structure
 :result/collection-path &amp;#91;:items&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A few more examples demonstrating &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!github repos yetibot | grep core | data show
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!github repos yetibot | tail 2 | data show
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Repeat propagates any data returned by the command it's running:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!github repos yetibot | repeat 2 random | data show
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;yetibot&quot;&gt;!repeat 3 cljquote | data show
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;docs&quot;&gt;Docs&lt;/h2&gt;&lt;p&gt;See the &lt;a href='http://localhost:4040/dev-guide#data_across_pipes'&gt;updated data docs in the Dev Guide&lt;/a&gt; for more details.&lt;/p&gt;
</description>
<author>
@devth
</author>
<pubDate>
Mon, 22 Apr 2019 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
https://yetibot.com/blog/2019-03-26-yetibot-workshop-at-ebay
</guid>
<link>
https://yetibot.com/blog/2019-03-26-yetibot-workshop-at-ebay
</link>
<title>
Yetibot Workshop @ eBay San Jose
</title>
<description>
&lt;p&gt;&lt;img src=&quot;/img/yetibot_workshop.jpg&quot; alt=&quot;Yetibot Workshop&quot; /&gt;&lt;/p&gt;&lt;p&gt;As part of eBay's internal Front End conference, &lt;a href='https://github.com/devth'&gt;@devth&lt;/a&gt; gave a &quot;Contributing to Yetibot&quot; workshop covering:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A demo of some of Yetibot's fun and useful features&lt;/li&gt;&lt;li&gt;Brief history of the project&lt;/li&gt;&lt;li&gt;Fundamentals of Yetibot usage:&lt;ul&gt;&lt;li&gt;Aliases&lt;/li&gt;&lt;li&gt;Expression composition via pipes&lt;/li&gt;&lt;li&gt;Values and Lists&lt;/li&gt;&lt;li&gt;Xargs&lt;/li&gt;&lt;li&gt;Data + render&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Livecoding a new feature, adding &lt;code&gt;forecast&lt;/code&gt; support to the existing weather  command (&lt;a href='https://github.com/yetibot/yetibot/pull/901'&gt;resulting PR!&lt;/a&gt;) with  the goal of showing off the amazing power of the Clojure language and the  interactive development workflow&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The audience consisted of FE engineers who had zero Clojure experience. During the livecoding session we went over some Clojure language basics.&lt;/p&gt;&lt;p&gt;To explain fundamentals, we deconstructed the &lt;code&gt;alltemps&lt;/code&gt; alias, breaking it down to its individual pieces and testing each command in isolation.&lt;/p&gt;&lt;p&gt;&lt;div class=&quot;video-responsive&quot;&gt; &lt;iframe   width=&quot;854&quot; height=&quot;480&quot;   src=&quot;https://www.youtube.com/embed/tcFvu6CL2fg?rel=0&quot;   frameborder=&quot;0&quot;   allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot;   allowfullscreen&gt; &lt;/iframe&gt; &lt;/div&gt;&lt;/p&gt;&lt;p&gt;This was a fun exercise, but to make it even more clear we're planning to build a front end component that, given an expression, visually breaks down the expression into its parts, showing the result of each command in the pipeline and the corresponding data behind them (follow along on &lt;a href='https://github.com/yetibot/yetibot/issues/900'&gt;#900&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/yetibot_stickers.jpg&quot; alt=&quot;Yetibot Stickers&quot; /&gt;&lt;/p&gt;&lt;p&gt;We now have Yetibot stickers! Ping &lt;code&gt;@devth&lt;/code&gt; (Slack, Twitter, etc) if you want one or three mailed to you!&lt;/p&gt;
</description>
<author>
@devth
</author>
<pubDate>
Tue, 26 Mar 2019 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
https://yetibot.com/blog/2019-02-20-moving-mutable-config-to-the-database
</guid>
<link>
https://yetibot.com/blog/2019-02-20-moving-mutable-config-to-the-database
</link>
<title>
Moving mutable configuration to the database
</title>
<description>
&lt;p&gt;It's time to move &lt;a href='https://yetibot.com/ops-guide#mutable'&gt;mutable config&lt;/a&gt; to the database in adherence with &lt;a href='https://www.digitalocean.com/community/tutorials/what-is-immutable-infrastructure'&gt;immutable infrastructure&lt;/a&gt; practices. Yetibot embraces &lt;a href='https://devth.com/2018/dec-deep-environmental-config'&gt;modern infrastructure&lt;/a&gt;. We made a lot of progress moving to mostly-immutable configuration. This is the next step, and is done as of Yetibot &lt;code&gt;0.5.0&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;One reason why we haven't done this up till now is that mutable config has never been relied upon much. Its purpose was to:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Store channel-specific configuration (e.g. &lt;code&gt;jira-project&lt;/code&gt;, &lt;code&gt;broadcast&lt;/code&gt;,   &lt;code&gt;jenkins-default&lt;/code&gt; or any other arbitrary room-specific key/value) for the   &lt;code&gt;channel&lt;/code&gt; command&lt;/li&gt;&lt;li&gt;Store channel-specific disabled categories for the &lt;code&gt;category&lt;/code&gt; command&lt;/li&gt;&lt;li&gt;Remember which channels Yetibot should join upon connecting to IRC&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Previously these values would be persisted to a local edn file which by default lives at &lt;code&gt;config/mutable.edn&lt;/code&gt;. However, in modern cloud environments this is not durable. For example when running Yetibot on Kubernetes this would be lost on each pod creation (unless a durable disk was mounted, but that's an unnecessary complication). We already have a durable place to store keys and values: the Postgres database.&lt;/p&gt;&lt;p&gt;All of these use cases will now move to a single &lt;code&gt;yetibot&amp;#95;channels&lt;/code&gt; table.&lt;/p&gt;&lt;h2 id=&quot;what&amp;#95;does&amp;#95;this&amp;#95;mean&amp;#95;for&amp;#95;me?&quot;&gt;What does this mean for me?&lt;/h2&gt;&lt;p&gt;Given that mutable config hasn't been heavily used the migration should be quite painless. We are not providing an automated migration tool, so your options are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Do nothing if you're not using any mutable config yet (quite likely) 😅&lt;/li&gt;&lt;li&gt;Use Yetibot to recreate the config, e.g. &lt;code&gt;channel set jia-project myjira&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Look in &lt;code&gt;config/mutable.edn&lt;/code&gt; and manually copy the key/values and chat source   rooms to the &lt;code&gt;yetibot&amp;#95;channels&lt;/code&gt; Postgres table. For example, if your   &lt;code&gt;mutable.edn&lt;/code&gt; looks like:&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;edn&quot;&gt;   {:room
    {:ybslack
     {&amp;quot;#general&amp;quot; {:disabled-categories #{:crude}},
      &amp;quot;#dev&amp;quot; {&amp;quot;jira-project&amp;quot; &amp;quot;YETIBOT&amp;quot;,
              &amp;quot;nope&amp;quot; &amp;quot;lol&amp;quot;,
              :disabled-categories #{:crude}}}}}
   &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   You would create rows in &lt;code&gt;yetibot&amp;#95;channels&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;table&gt; &lt;tr&gt;   &lt;th&gt;&lt;code&gt;chat&amp;#95;source&amp;#95;adapter&lt;/code&gt;&lt;/th&gt;   &lt;th&gt;&lt;code&gt;chat&amp;#95;source&amp;#95;room&lt;/code&gt;&lt;/th&gt;   &lt;th&gt;&lt;code&gt;key&lt;/code&gt;&lt;/th&gt;   &lt;th&gt;&lt;code&gt;value&lt;/code&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt;   &lt;td&gt;:ybslack&lt;/td&gt;   &lt;td&gt;#general&lt;/td&gt;   &lt;td&gt;disabled-categories&lt;/td&gt;   &lt;td&gt;#{:crude}&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;   &lt;td&gt;:ybslack&lt;/td&gt;   &lt;td&gt;#dev&lt;/td&gt;   &lt;td&gt;jira-project&lt;/td&gt;   &lt;td&gt;YETIBOT&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;   &lt;td&gt;:ybslack&lt;/td&gt;   &lt;td&gt;#dev&lt;/td&gt;   &lt;td&gt;nope&lt;/td&gt;   &lt;td&gt;lol&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;   &lt;td&gt;:ybslack&lt;/td&gt;   &lt;td&gt;#dev&lt;/td&gt;   &lt;td&gt;disabled-categories&lt;/td&gt;   &lt;td&gt;#{:crude}&lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;/table&gt;&lt;/p&gt;&lt;p&gt;All values in the table are strings.&lt;/p&gt;&lt;p&gt;If you use IRC, your channels to join config will be lost as well. Simply re-invite Yetibot to the proper channels and they will be stored in the database.&lt;/p&gt;&lt;p&gt;Here's the &lt;a href='https://github.com/yetibot/yetibot.core/pull/61'&gt;Pull Request&lt;/a&gt; that made these changes.&lt;/p&gt;
</description>
<author>
@devth
</author>
<pubDate>
Wed, 20 Feb 2019 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
https://yetibot.com/blog/2019-01-03-yetibot-2019-roadmap
</guid>
<link>
https://yetibot.com/blog/2019-01-03-yetibot-2019-roadmap
</link>
<title>
Looking back at 2018 and forward for 2019
</title>
<description>
&lt;p&gt;We made a ton of progress on Yetibot in 2018 and gained some new contributors in the process! A few high level contributions include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;launched this site and started a major effort to write comprehensive docs&lt;/li&gt;&lt;li&gt;added &lt;code&gt;pagerduty&lt;/code&gt;&lt;/li&gt;&lt;li&gt;added &lt;code&gt;catchpoint&lt;/code&gt;&lt;/li&gt;&lt;li&gt;migrated &lt;code&gt;weather&lt;/code&gt; to a new API provider&lt;/li&gt;&lt;li&gt;added &lt;code&gt;karma&lt;/code&gt;&lt;/li&gt;&lt;li&gt;added &lt;code&gt;github releases&lt;/code&gt;&lt;/li&gt;&lt;li&gt;added support for Slack Reaction-based observers 🤯&lt;/li&gt;&lt;li&gt;added &lt;code&gt;gcs&lt;/code&gt; for Google Cloud Storage&lt;/li&gt;&lt;li&gt;added &lt;code&gt;cron&lt;/code&gt; command&lt;/li&gt;&lt;li&gt;created a GraphQL API&lt;/li&gt;&lt;li&gt;built a new web dashboard and shipped it as  &lt;a href='https://www.npmjs.com/package/yetibot-dashboard'&gt;&lt;code&gt;yetibot-dashboard&lt;/code&gt;&lt;/a&gt;npm module&lt;/li&gt;&lt;li&gt;added &lt;code&gt;render&lt;/code&gt; for custom command output using its &lt;code&gt;data&lt;/code&gt;&lt;/li&gt;&lt;li&gt;improved the way we record chat history in the database, including Yetibot's  own output&lt;/li&gt;&lt;li&gt;fixed a ton of bugs 😁&lt;/li&gt;&lt;li&gt;made errors from a command explicit, enabling us to abort a pipeline early  when there's an error&lt;/li&gt;&lt;li&gt;improved Slack auto-reconnect&lt;/li&gt;&lt;li&gt;added ability to reply to threads in Slack&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;contributors&amp;#95;in&amp;#95;2018&amp;#95;💥&quot;&gt;Contributors in 2018 💥&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/cheukyin699'&gt;@cheukyin699&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/cvic'&gt;@cvic&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/devth'&gt;@devth&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/gaberger'&gt;@gaberger&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/jcorrado'&gt;@jcorrado&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/kaffein'&gt;@kaffein&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/linuxsoares'&gt;@linuxsoares&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/teodorlu'&gt;@teodorlu&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;2019&amp;#95;roadmap&quot;&gt;2019 Roadmap&lt;/h2&gt;&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;&lt;p&gt;While we made a great start, the docs are not quite there. This will be a focus of 2019: continuing to improve coverage of documentation!&lt;/p&gt;&lt;p&gt;For user docs we'll add coverage and examples for more commands, as well as continue to add more complex examples that showcase some of Yetibot's more advanced features.&lt;/p&gt;&lt;p&gt;For dev docs we'll improve documentation of Yetibot internals and make it easier for new contributors to ramp up.&lt;/p&gt;&lt;h3 id=&quot;web&amp;#95;based&amp;#95;repl&quot;&gt;Web based REPL&lt;/h3&gt;&lt;p&gt;We'll work on a truly interactive Yetibot REPL React component and use it on the docs site so users can more readily play with Yetibot while exploring the docs.&lt;/p&gt;&lt;h3 id=&quot;data&quot;&gt;Data&lt;/h3&gt;&lt;p&gt;Toward the end of 2018 we experimented with propagating data behind pipes for each command. We'll continue exposing data on all commands and play around with some potential usage before solidifying this potentially superpower feature.&lt;/p&gt;&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;&lt;p&gt;Command configuration in Yetibot is currently spec'd out with schema. We'll move to &lt;code&gt;clojure.spec&lt;/code&gt; and start to leverage some of its capabilities for things like:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;web-based config validation&lt;/li&gt;&lt;li&gt;config generation (as opposed to a manually maintained and potentially stale  &lt;code&gt;config.sample.edn&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;friendly command output with help docs when a command is not yet configured&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;dashboard&quot;&gt;Dashboard&lt;/h3&gt;&lt;p&gt;The &lt;a href='https://public.yetibot.com'&gt;current dashboard&lt;/a&gt; was a great starting point. Now we need to make it more usable by improving the way history renders, adding more filters to history to search on, adding pagination or infinite scroll, and improving visibility into the health of the Yetibot instance.&lt;/p&gt;&lt;h3 id=&quot;screencasts&quot;&gt;Screencasts&lt;/h3&gt;&lt;p&gt;We'll post more screencasts that demonstrate contributing to Yetibot and what an interactive REPL-based development workflow looks like. We'll try to utilize Clojure 1.10's new features as well as the more experimental stuff that Cognitect is putting out, like how REBL fits into our dev workflow.&lt;/p&gt;&lt;h3 id=&quot;and&amp;#95;much&amp;#95;more&quot;&gt;And much more&lt;/h3&gt;&lt;p&gt;We'll continue to build fun stuff as it comes up, like we've done all along. Feel free to &lt;a href='https://slack.yetibot.com'&gt;join us!&lt;/a&gt;&lt;/p&gt;&lt;p&gt;And check out the &lt;a href='https://github.com/yetibot/yetibot/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22'&gt;&lt;code&gt;good first issue&lt;/code&gt;&lt;/a&gt; issues in the tracker to jump into contributing!&lt;/p&gt;
</description>
<author>
@devth
</author>
<pubDate>
Thu, 03 Jan 2019 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
https://yetibot.com/blog/2018-03-24-launch
</guid>
<link>
https://yetibot.com/blog/2018-03-24-launch
</link>
<title>
Yetibot.com Launch
</title>
<description>
&lt;p&gt;Yetibot finally has a site!&lt;/p&gt;&lt;p&gt;Check out the &lt;a href='https://github.com/yetibot/yetibot.github.io'&gt;source on GitHub&lt;/a&gt; here if you're so inclined. It's powered by &lt;a href='http://cryogenweb.org/'&gt;Cryogen&lt;/a&gt;, the Clojure-based static site generator.&lt;/p&gt;&lt;p&gt;One of the goals with launching the site was to have inline interactive Yetibot examples that uses the GraphQL API on the public Yetibot instance to evaluate! See the &lt;a href='/user-guide'&gt;User Guide&lt;/a&gt; to check out the interactive examples in the docs.&lt;/p&gt;&lt;p&gt;The site and docs are pretty bare bones but we'll improve it over time.&lt;/p&gt;
</description>
<author>
@devth
</author>
<pubDate>
Sat, 24 Mar 2018 00:00:00 +0000
</pubDate>
</item>
</channel>
</rss>
